// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from testMessage.proto

package com.kevin.framework.generate.test;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ApiRestPacket implements Externalizable, Message<ApiRestPacket>, Schema<ApiRestPacket>
{

    public static Schema<ApiRestPacket> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ApiRestPacket getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ApiRestPacket DEFAULT_INSTANCE = new ApiRestPacket();

    
    private Integer reqNum;
    private Integer errCode;
    private String errMsg;
    private ByteString parameter;

    public ApiRestPacket()
    {
        
    }

    public ApiRestPacket(
        Integer reqNum,
        Integer errCode,
        String errMsg
    )
    {
        this.reqNum = reqNum;
        this.errCode = errCode;
        this.errMsg = errMsg;
    }

    // getters and setters

    // reqNum

    public Integer getReqNum()
    {
        return reqNum;
    }

    public void setReqNum(Integer reqNum)
    {
        this.reqNum = reqNum;
    }

    // errCode

    public Integer getErrCode()
    {
        return errCode;
    }

    public void setErrCode(Integer errCode)
    {
        this.errCode = errCode;
    }

    // errMsg

    public String getErrMsg()
    {
        return errMsg;
    }

    public void setErrMsg(String errMsg)
    {
        this.errMsg = errMsg;
    }

    // parameter

    public ByteString getParameter()
    {
        return parameter;
    }

    public void setParameter(ByteString parameter)
    {
        this.parameter = parameter;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ApiRestPacket> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ApiRestPacket newMessage()
    {
        return new ApiRestPacket();
    }

    public Class<ApiRestPacket> typeClass()
    {
        return ApiRestPacket.class;
    }

    public String messageName()
    {
        return ApiRestPacket.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ApiRestPacket.class.getName();
    }

    public boolean isInitialized(ApiRestPacket message)
    {
        return 
            message.reqNum != null 
            && message.errCode != null 
            && message.errMsg != null;
    }

    public void mergeFrom(Input input, ApiRestPacket message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.reqNum = input.readInt32();
                    break;
                case 2:
                    message.errCode = input.readInt32();
                    break;
                case 3:
                    message.errMsg = input.readString();
                    break;
                case 4:
                    message.parameter = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ApiRestPacket message) throws IOException
    {
        if(message.reqNum == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(1, message.reqNum, false);

        if(message.errCode == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(2, message.errCode, false);

        if(message.errMsg == null)
            throw new UninitializedMessageException(message);
        output.writeString(3, message.errMsg, false);

        if(message.parameter != null)
            output.writeBytes(4, message.parameter, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "reqNum";
            case 2: return "errCode";
            case 3: return "errMsg";
            case 4: return "parameter";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("reqNum", 1);
        __fieldMap.put("errCode", 2);
        __fieldMap.put("errMsg", 3);
        __fieldMap.put("parameter", 4);
    }
    
}
