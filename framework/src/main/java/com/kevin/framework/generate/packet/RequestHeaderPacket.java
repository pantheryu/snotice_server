// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from snotice.proto

package com.kevin.framework.generate.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class RequestHeaderPacket implements Externalizable, Message<RequestHeaderPacket>, Schema<RequestHeaderPacket>
{

    public static Schema<RequestHeaderPacket> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RequestHeaderPacket getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RequestHeaderPacket DEFAULT_INSTANCE = new RequestHeaderPacket();

    
    private String deviceId;
    private String producer;
    private String model;
    private String firmware;
    private String osType;
    private String osVer;
    private String udid;
    private Integer clientVer;
    private String ttid;
    private Long firstInstalledAt;
    private Long lastInstalledAt;
    private Long firstActivatedAt;
    private String network;
    private String location;
    private String appKey;

    public RequestHeaderPacket()
    {
        
    }

    // getters and setters

    // deviceId

    public String getDeviceId()
    {
        return deviceId;
    }

    public void setDeviceId(String deviceId)
    {
        this.deviceId = deviceId;
    }

    // producer

    public String getProducer()
    {
        return producer;
    }

    public void setProducer(String producer)
    {
        this.producer = producer;
    }

    // model

    public String getModel()
    {
        return model;
    }

    public void setModel(String model)
    {
        this.model = model;
    }

    // firmware

    public String getFirmware()
    {
        return firmware;
    }

    public void setFirmware(String firmware)
    {
        this.firmware = firmware;
    }

    // osType

    public String getOsType()
    {
        return osType;
    }

    public void setOsType(String osType)
    {
        this.osType = osType;
    }

    // osVer

    public String getOsVer()
    {
        return osVer;
    }

    public void setOsVer(String osVer)
    {
        this.osVer = osVer;
    }

    // udid

    public String getUdid()
    {
        return udid;
    }

    public void setUdid(String udid)
    {
        this.udid = udid;
    }

    // clientVer

    public Integer getClientVer()
    {
        return clientVer;
    }

    public void setClientVer(Integer clientVer)
    {
        this.clientVer = clientVer;
    }

    // ttid

    public String getTtid()
    {
        return ttid;
    }

    public void setTtid(String ttid)
    {
        this.ttid = ttid;
    }

    // firstInstalledAt

    public Long getFirstInstalledAt()
    {
        return firstInstalledAt;
    }

    public void setFirstInstalledAt(Long firstInstalledAt)
    {
        this.firstInstalledAt = firstInstalledAt;
    }

    // lastInstalledAt

    public Long getLastInstalledAt()
    {
        return lastInstalledAt;
    }

    public void setLastInstalledAt(Long lastInstalledAt)
    {
        this.lastInstalledAt = lastInstalledAt;
    }

    // firstActivatedAt

    public Long getFirstActivatedAt()
    {
        return firstActivatedAt;
    }

    public void setFirstActivatedAt(Long firstActivatedAt)
    {
        this.firstActivatedAt = firstActivatedAt;
    }

    // network

    public String getNetwork()
    {
        return network;
    }

    public void setNetwork(String network)
    {
        this.network = network;
    }

    // location

    public String getLocation()
    {
        return location;
    }

    public void setLocation(String location)
    {
        this.location = location;
    }

    // appKey

    public String getAppKey()
    {
        return appKey;
    }

    public void setAppKey(String appKey)
    {
        this.appKey = appKey;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RequestHeaderPacket> cachedSchema()
    {
        return this;
    }

    // schema methods

    public RequestHeaderPacket newMessage()
    {
        return new RequestHeaderPacket();
    }

    public Class<RequestHeaderPacket> typeClass()
    {
        return RequestHeaderPacket.class;
    }

    public String messageName()
    {
        return RequestHeaderPacket.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RequestHeaderPacket.class.getName();
    }

    public boolean isInitialized(RequestHeaderPacket message)
    {
        return true;
    }

    public void mergeFrom(Input input, RequestHeaderPacket message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.deviceId = input.readString();
                    break;
                case 2:
                    message.producer = input.readString();
                    break;
                case 3:
                    message.model = input.readString();
                    break;
                case 4:
                    message.firmware = input.readString();
                    break;
                case 5:
                    message.osType = input.readString();
                    break;
                case 6:
                    message.osVer = input.readString();
                    break;
                case 7:
                    message.udid = input.readString();
                    break;
                case 8:
                    message.clientVer = input.readInt32();
                    break;
                case 9:
                    message.ttid = input.readString();
                    break;
                case 10:
                    message.firstInstalledAt = input.readInt64();
                    break;
                case 11:
                    message.lastInstalledAt = input.readInt64();
                    break;
                case 12:
                    message.firstActivatedAt = input.readInt64();
                    break;
                case 13:
                    message.network = input.readString();
                    break;
                case 14:
                    message.location = input.readString();
                    break;
                case 15:
                    message.appKey = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, RequestHeaderPacket message) throws IOException
    {
        if(message.deviceId != null)
            output.writeString(1, message.deviceId, false);

        if(message.producer != null)
            output.writeString(2, message.producer, false);

        if(message.model != null)
            output.writeString(3, message.model, false);

        if(message.firmware != null)
            output.writeString(4, message.firmware, false);

        if(message.osType != null)
            output.writeString(5, message.osType, false);

        if(message.osVer != null)
            output.writeString(6, message.osVer, false);

        if(message.udid != null)
            output.writeString(7, message.udid, false);

        if(message.clientVer != null)
            output.writeInt32(8, message.clientVer, false);

        if(message.ttid != null)
            output.writeString(9, message.ttid, false);

        if(message.firstInstalledAt != null)
            output.writeInt64(10, message.firstInstalledAt, false);

        if(message.lastInstalledAt != null)
            output.writeInt64(11, message.lastInstalledAt, false);

        if(message.firstActivatedAt != null)
            output.writeInt64(12, message.firstActivatedAt, false);

        if(message.network != null)
            output.writeString(13, message.network, false);

        if(message.location != null)
            output.writeString(14, message.location, false);

        if(message.appKey != null)
            output.writeString(15, message.appKey, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "deviceId";
            case 2: return "producer";
            case 3: return "model";
            case 4: return "firmware";
            case 5: return "osType";
            case 6: return "osVer";
            case 7: return "udid";
            case 8: return "clientVer";
            case 9: return "ttid";
            case 10: return "firstInstalledAt";
            case 11: return "lastInstalledAt";
            case 12: return "firstActivatedAt";
            case 13: return "network";
            case 14: return "location";
            case 15: return "appKey";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("deviceId", 1);
        __fieldMap.put("producer", 2);
        __fieldMap.put("model", 3);
        __fieldMap.put("firmware", 4);
        __fieldMap.put("osType", 5);
        __fieldMap.put("osVer", 6);
        __fieldMap.put("udid", 7);
        __fieldMap.put("clientVer", 8);
        __fieldMap.put("ttid", 9);
        __fieldMap.put("firstInstalledAt", 10);
        __fieldMap.put("lastInstalledAt", 11);
        __fieldMap.put("firstActivatedAt", 12);
        __fieldMap.put("network", 13);
        __fieldMap.put("location", 14);
        __fieldMap.put("appKey", 15);
    }
    
}
