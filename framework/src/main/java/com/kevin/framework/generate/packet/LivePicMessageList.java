// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from snotice.proto

package com.kevin.framework.generate.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class LivePicMessageList implements Externalizable, Message<LivePicMessageList>, Schema<LivePicMessageList>
{

    public static Schema<LivePicMessageList> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LivePicMessageList getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LivePicMessageList DEFAULT_INSTANCE = new LivePicMessageList();

    
    private List<LivePicMessage> picList;

    public LivePicMessageList()
    {
        
    }

    // getters and setters

    // picList

    public List<LivePicMessage> getPicListList()
    {
        return picList;
    }

    public void setPicListList(List<LivePicMessage> picList)
    {
        this.picList = picList;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LivePicMessageList> cachedSchema()
    {
        return this;
    }

    // schema methods

    public LivePicMessageList newMessage()
    {
        return new LivePicMessageList();
    }

    public Class<LivePicMessageList> typeClass()
    {
        return LivePicMessageList.class;
    }

    public String messageName()
    {
        return LivePicMessageList.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LivePicMessageList.class.getName();
    }

    public boolean isInitialized(LivePicMessageList message)
    {
        return true;
    }

    public void mergeFrom(Input input, LivePicMessageList message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.picList == null)
                        message.picList = new ArrayList<LivePicMessage>();
                    message.picList.add(input.mergeObject(null, LivePicMessage.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LivePicMessageList message) throws IOException
    {
        if(message.picList != null)
        {
            for(LivePicMessage picList : message.picList)
            {
                if(picList != null)
                    output.writeObject(1, picList, LivePicMessage.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "picList";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("picList", 1);
    }
    
}
