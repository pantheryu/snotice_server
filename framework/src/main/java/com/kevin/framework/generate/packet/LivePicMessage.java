// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from snotice.proto

package com.kevin.framework.generate.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class LivePicMessage implements Externalizable, Message<LivePicMessage>, Schema<LivePicMessage>
{

    public static Schema<LivePicMessage> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static LivePicMessage getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final LivePicMessage DEFAULT_INSTANCE = new LivePicMessage();

    
    private String picStoreUrl;
    private String picInfoUrl;

    public LivePicMessage()
    {
        
    }

    public LivePicMessage(
        String picStoreUrl,
        String picInfoUrl
    )
    {
        this.picStoreUrl = picStoreUrl;
        this.picInfoUrl = picInfoUrl;
    }

    // getters and setters

    // picStoreUrl

    public String getPicStoreUrl()
    {
        return picStoreUrl;
    }

    public void setPicStoreUrl(String picStoreUrl)
    {
        this.picStoreUrl = picStoreUrl;
    }

    // picInfoUrl

    public String getPicInfoUrl()
    {
        return picInfoUrl;
    }

    public void setPicInfoUrl(String picInfoUrl)
    {
        this.picInfoUrl = picInfoUrl;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<LivePicMessage> cachedSchema()
    {
        return this;
    }

    // schema methods

    public LivePicMessage newMessage()
    {
        return new LivePicMessage();
    }

    public Class<LivePicMessage> typeClass()
    {
        return LivePicMessage.class;
    }

    public String messageName()
    {
        return LivePicMessage.class.getSimpleName();
    }

    public String messageFullName()
    {
        return LivePicMessage.class.getName();
    }

    public boolean isInitialized(LivePicMessage message)
    {
        return 
            message.picStoreUrl != null 
            && message.picInfoUrl != null;
    }

    public void mergeFrom(Input input, LivePicMessage message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.picStoreUrl = input.readString();
                    break;
                case 2:
                    message.picInfoUrl = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, LivePicMessage message) throws IOException
    {
        if(message.picStoreUrl == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.picStoreUrl, false);

        if(message.picInfoUrl == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.picInfoUrl, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "picStoreUrl";
            case 2: return "picInfoUrl";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("picStoreUrl", 1);
        __fieldMap.put("picInfoUrl", 2);
    }
    
}
