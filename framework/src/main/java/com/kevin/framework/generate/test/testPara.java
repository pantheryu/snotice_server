// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from testPara.proto

package com.kevin.framework.generate.test;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class testPara implements Externalizable, Message<testPara>, Schema<testPara>
{

    public static Schema<testPara> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static testPara getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final testPara DEFAULT_INSTANCE = new testPara();

    
    private String a;
    private String b;

    public testPara()
    {
        
    }

    public testPara(
        String a,
        String b
    )
    {
        this.a = a;
        this.b = b;
    }

    // getters and setters

    // a

    public String getA()
    {
        return a;
    }

    public void setA(String a)
    {
        this.a = a;
    }

    // b

    public String getB()
    {
        return b;
    }

    public void setB(String b)
    {
        this.b = b;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<testPara> cachedSchema()
    {
        return this;
    }

    // schema methods

    public testPara newMessage()
    {
        return new testPara();
    }

    public Class<testPara> typeClass()
    {
        return testPara.class;
    }

    public String messageName()
    {
        return testPara.class.getSimpleName();
    }

    public String messageFullName()
    {
        return testPara.class.getName();
    }

    public boolean isInitialized(testPara message)
    {
        return 
            message.a != null 
            && message.b != null;
    }

    public void mergeFrom(Input input, testPara message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.a = input.readString();
                    break;
                case 2:
                    message.b = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, testPara message) throws IOException
    {
        if(message.a == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.a, false);

        if(message.b == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.b, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "a";
            case 2: return "b";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("a", 1);
        __fieldMap.put("b", 2);
    }
    
}
