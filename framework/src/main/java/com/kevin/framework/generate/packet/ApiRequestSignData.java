// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from snotice.proto

package com.kevin.framework.generate.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ApiRequestSignData implements Externalizable, Message<ApiRequestSignData>, Schema<ApiRequestSignData>
{

    public static Schema<ApiRequestSignData> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ApiRequestSignData getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ApiRequestSignData DEFAULT_INSTANCE = new ApiRequestSignData();

    
    private List<ApiCallPacket> apiCalls;
    private String longTermSessionID;
    private HandShakePacket handShake;
    private RequestHeaderPacket packetHeader;
    private Integer apiVer;
    private Long timeStamp;

    public ApiRequestSignData()
    {
        
    }

    // getters and setters

    // apiCalls

    public List<ApiCallPacket> getApiCallsList()
    {
        return apiCalls;
    }

    public void setApiCallsList(List<ApiCallPacket> apiCalls)
    {
        this.apiCalls = apiCalls;
    }

    // longTermSessionID

    public String getLongTermSessionID()
    {
        return longTermSessionID;
    }

    public void setLongTermSessionID(String longTermSessionID)
    {
        this.longTermSessionID = longTermSessionID;
    }

    // handShake

    public HandShakePacket getHandShake()
    {
        return handShake;
    }

    public void setHandShake(HandShakePacket handShake)
    {
        this.handShake = handShake;
    }

    // packetHeader

    public RequestHeaderPacket getPacketHeader()
    {
        return packetHeader;
    }

    public void setPacketHeader(RequestHeaderPacket packetHeader)
    {
        this.packetHeader = packetHeader;
    }

    // apiVer

    public Integer getApiVer()
    {
        return apiVer;
    }

    public void setApiVer(Integer apiVer)
    {
        this.apiVer = apiVer;
    }

    // timeStamp

    public Long getTimeStamp()
    {
        return timeStamp;
    }

    public void setTimeStamp(Long timeStamp)
    {
        this.timeStamp = timeStamp;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ApiRequestSignData> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ApiRequestSignData newMessage()
    {
        return new ApiRequestSignData();
    }

    public Class<ApiRequestSignData> typeClass()
    {
        return ApiRequestSignData.class;
    }

    public String messageName()
    {
        return ApiRequestSignData.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ApiRequestSignData.class.getName();
    }

    public boolean isInitialized(ApiRequestSignData message)
    {
        return true;
    }

    public void mergeFrom(Input input, ApiRequestSignData message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.apiCalls == null)
                        message.apiCalls = new ArrayList<ApiCallPacket>();
                    message.apiCalls.add(input.mergeObject(null, ApiCallPacket.getSchema()));
                    break;

                case 2:
                    message.longTermSessionID = input.readString();
                    break;
                case 3:
                    message.handShake = input.mergeObject(message.handShake, HandShakePacket.getSchema());
                    break;

                case 4:
                    message.packetHeader = input.mergeObject(message.packetHeader, RequestHeaderPacket.getSchema());
                    break;

                case 5:
                    message.apiVer = input.readInt32();
                    break;
                case 6:
                    message.timeStamp = input.readInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ApiRequestSignData message) throws IOException
    {
        if(message.apiCalls != null)
        {
            for(ApiCallPacket apiCalls : message.apiCalls)
            {
                if(apiCalls != null)
                    output.writeObject(1, apiCalls, ApiCallPacket.getSchema(), true);
            }
        }


        if(message.longTermSessionID != null)
            output.writeString(2, message.longTermSessionID, false);

        if(message.handShake != null)
             output.writeObject(3, message.handShake, HandShakePacket.getSchema(), false);


        if(message.packetHeader != null)
             output.writeObject(4, message.packetHeader, RequestHeaderPacket.getSchema(), false);


        if(message.apiVer != null)
            output.writeInt32(5, message.apiVer, false);

        if(message.timeStamp != null)
            output.writeInt64(6, message.timeStamp, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "apiCalls";
            case 2: return "longTermSessionID";
            case 3: return "handShake";
            case 4: return "packetHeader";
            case 5: return "apiVer";
            case 6: return "timeStamp";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("apiCalls", 1);
        __fieldMap.put("longTermSessionID", 2);
        __fieldMap.put("handShake", 3);
        __fieldMap.put("packetHeader", 4);
        __fieldMap.put("apiVer", 5);
        __fieldMap.put("timeStamp", 6);
    }
    
}
